<3 //Explain the purpose of exception handling in PHP. How do you catch and handle exceptions
in your code? Provide an example of how you would use try-catch blocks.//

The Function of Exception Handling in PHP

Exception handling is an important aspect of programming because it allows 
developers to gracefully manage unexpected errors while maintaining program stability. 
Exceptions are objects in PHP that represent runtime errors. They provide a structured mechanism 
for detecting, handling, and recovering from program execution errors.

Exceptions in Catching and Handling

To effectively catch and handle exceptions, PHP provides the try-catch block structure. 
The try block contains code that could potentially throw an exception. If an exception occurs 
within the try block, the execution flow moves to the catch block that corresponds to the specific 
exception type. The catch block contains the code that handles the exception, which typically logs the error, 
displays a user-friendly message, or initiates corrective actions.

Example of try-catch block

try {
  $file = fopen('myfile.txt', 'r');
  $content = fread($file, filesize('myfile.txt'));
  echo $content;
  fclose($file);
} catch (Exception $e) {
  echo 'Error opening or reading file: ' . $e->getMessage();
}

The try block in this example attempts to open and read the file'myfile.txt'. 
An exception is thrown if an error occurs during this operation, such as the file not 
existing or being inaccessible. This exception is caught by the catch block, which retrieves 
the error message using the getMessage() method and displays it to the user. This method prevents
 the program from stopping abruptly due to unforeseen errors and provides a more user-friendly experience.

Advantages of Exceptional Handling

In PHP development, exception handling has several advantages:

It separates error handling code from the main program logic, making the code cleaner and 
easier to understand.

It provides a structured way to identify and handle specific errors, preventing unexpected 
program terminations.
