5>//How would you protect a PHP application from common security vulnerabilities such as SQL
injection and cross-site scripting (XSS)? Provide code examples or best practices for
mitigating these threats.//

It is critical to protect a PHP application from common security flaws such as SQL 
injection and cross-site scripting (XSS) in order to maintain data integrity and prevent 
unauthorized access or manipulation. Here are some effective mitigation strategies for these threats:

1. SQL Injection Avoidance:

Escape User Input: 

To prevent malicious code injection, 
sanitize user-supplied data before using it in SQL queries with the mysqli_real_escape_string() function.

Use Prepared Statements: 

Prepared statements separate data from the query, making SQL injection attempts impossible.

2. Preventing Cross-Site Scripting (XSS):

HTML Entity Encoding: 

To prevent malicious script execution, use the htmlspecialchars() 
function to encode user-supplied data.

Output Validation: 
Sanitize user-generated content based on the expected output type, such as email addresses or URLs.

3. Extra Security Measures:

Validate user input to ensure it matches the expected format and data type, avoiding unexpected behavior.

Use a Secure Web Framework: 
Use a secure PHP framework such as Laravel or Symfony, which include built-in security 
and input sanitization mechanisms.

Updates on a regular basis: 
Keep PHP and all dependencies up to date in order to address newly discovered vulnerabilities.

Implement User Access Control: 
Restrict access to sensitive data and features based on user roles and permissions by 
requiring user authentication and authorization.

